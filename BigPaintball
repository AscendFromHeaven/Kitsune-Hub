local Settings = {
    DisplayCircle = false,
    Radius = 0,

    SilentAim = false,
    AimLock = false,
    FireRate = false,
    Velocity = false,
    Automatic = false,
    GadgetDamage = false,
    Damage = false,
    Speed = false,

    Esp = false,
    Names = false,
    Tracers = false,
    Boxes = false,
    EspNames = false,

    AddictionalSpeed = 0,
}

local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
repeat task.wait() until game:IsLoaded()
if not hookmetamethod then game.Players.LocalPlayer:Kick('Get Better Executer please :(') end
 
local players = game:GetService('Players')
local RunService = game:GetService('RunService')
local Teams = game:GetService('Teams')
local user_input_service = game:GetService('UserInputService')
local workspace = game:GetService('Workspace')
 
local camera = workspace.CurrentCamera
local wtvp = camera.WorldToViewportPoint
local localplayer = players.LocalPlayer
 
local function indexExists(object, index)
    local _, value = pcall(function() return object[index] end)
    return value
end

local function get_character(player) return indexExists(player, 'Character') end

local function get_mouse_location() return user_input_service:GetMouseLocation() end
local function is_alive(player) return player.Character and player.Character:FindFirstChild('Humanoid') and player.Character:FindFirstChild('Humanoid').Health > 0 end
local function is_team(player) return #Teams:GetChildren() > 0 and player.Team == localplayer.Team end
 
local function closestToFOV(fov)
    local maxDistance = fov or math.huge
    local closestPlayer = nil
    local closestPlayerDistance = math.huge

    for _, player in pairs(players:GetPlayers()) do
        local success, result = pcall(function()
            if player ~= localplayer and not is_team(player) and get_character(player) and is_alive(player) then
                local pos, on_screen = wtvp(camera, get_character(player).Head.Position)
                if not on_screen then
                    return
                end

                local distance = (get_mouse_location() - Vector2.new(pos.X, pos.Y)).magnitude
                if distance <= maxDistance and distance < closestPlayerDistance then
                    closestPlayer = player
                    closestPlayerDistance = distance
                end
            end
        end)

        if not success then
            warn("Error occurred while processing player:", player)
        end
    end

    return closestPlayer
end



game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    wait(1)

    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

getgenv().rejoin = game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
    if child.Name == 'ErrorPrompt' and child:FindFirstChild('MessageArea') and child.MessageArea:FindFirstChild("ErrorFrame") then
        game:GetService("TeleportService"):Teleport(game.PlaceId)
    end
end)

local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/DeityHB/Stuff/main/UI2.5'))()
local Box = Library.Render({
    Title = 'Kitsune V1.1 | https://discord.gg/Q4vrDgzb7G';
    SavePosition = true;
})


local TabGun = Box:Tab({
    Title = 'Gun'
})

local SectionAim = TabGun:Section({
    Title = "Aim";
})

SectionAim:Label({
    Title = "FOV Settings",
})

Settings.Radius = 0
local circle = Drawing.new('Circle')
circle.NumSides = 50
circle.Thickness = 2
circle.Radius = Settings.Radius or 50
circle.Filled = false
circle.Transparency = 1
circle.Color = Color3.new(1, 1, 1)
circle.Visible = Settings.DisplayCircle

SectionAim:Slider({
    Title = "Radius",
    Min = 1,
    Max = 400,
    Default = 0,
    Callback = function(v)
        Settings.Radius = v
        circle.Radius = v -- Update the circle's Radius property
    end
})

SectionAim:Toggle({
    Title = 'Show Circle',
    Default = false,
    Callback = function(value)
        Settings.DisplayCircle = value
        circle.Visible = value -- Update the circle's Visible property
    end
})

local target = nil

RunService.Heartbeat:Connect(function(deltaTime)
    task.wait(deltaTime ^ 2)
    target = closestToFOV(Settings.Radius)
    circle.Position = get_mouse_location()
end)



SectionAim:Label({
    Title = "Silent Aim Settings",
})

SectionAim:Toggle({
    Title = 'Aimbot',
    Default = false,
    Callback = function(value)
        Settings.SilentAim = value
    end
})



local OldNamecall

OldNamecall = hookmetamethod(workspace, '__namecall', newcclosure(function(...)
    local args = { ... }
    local method = string.lower(getnamecallmethod())
    local caller = getcallingscript()
    
    if Settings.SilentAim and  method == 'findpartonraywithwhitelist' and tostring(caller) == 'First Person Controller' then
        local HitPart = target and target.Character and target.Character.Head or nil
        if HitPart then
            local Origin = HitPart.Position + Vector3.new(0, 5, 0)
            local Direction = (HitPart.Position - Origin)
            args[2] = Ray.new(Origin, Direction)

            return OldNamecall(unpack(args))
        else
            return OldNamecall(...)
        end
    end
    return OldNamecall(...)
end))

SectionAim:Toggle({
    Title = 'Aimlock (E)',
    Default = false,
    Callback = function(value)
        Settings.AimLock = value
    end
})


local userInputService = game:GetService("UserInputService")
local aim = false

userInputService.InputBegan:Connect(function(inp)
    if inp.KeyCode == Enum.KeyCode.E then
        aim = true
    end
end)

userInputService.InputEnded:Connect(function(inp)
    if inp.KeyCode == Enum.KeyCode.E then
        aim = false
    end
end)

task.spawn(function()
    while task.wait() do
        pcall(function()
            if aim then
                if Settings.AimLock then
                    workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, target.Character.Head.Position)
                end
            end
        end)
    end
end)

local SectionGunMods = TabGun:Section({
    Title = "Gun Mod's";
})

local originalGunModValues = {}

local function ApplyGunModChanges()
    local gunModsToApply = {}

    if Settings.FireRate then
        gunModsToApply.shotrate = 0.001
    end
    if Settings.Velocity then
        gunModsToApply.velocity = 50000
    end
    if Settings.Automatic then
        gunModsToApply.automatic = true
    end
    if Settings.GadgetDamage then
        gunModsToApply.gadgetDamage = 1000
    end
    if Settings.Damage then
        gunModsToApply.damage = 10000
    end
    if Settings.Speed then
        gunModsToApply.additionalSpeed = Settings.AddictionalSpeed
    end

    for i, v in next, getgc(true) do
        if type(v) == "table" and rawget(v, "damage") then
            if not originalGunModValues[v] then
                originalGunModValues[v] = {}
            end

            for mod, value in pairs(gunModsToApply) do
                if not originalGunModValues[v][mod] then
                    originalGunModValues[v][mod] = v[mod]
                end

                v[mod] = value
            end
        end
    end
end

local function RestoreGunModValues()
    for i, v in next, getgc(true) do
        if type(v) == "table" and rawget(v, "damage") then
            if originalGunModValues[v] then
                for mod, value in pairs(originalGunModValues[v]) do
                    v[mod] = value
                end
                originalGunModValues[v] = nil
            end
        end
    end
end

SectionGunMods:Toggle({
    Title = 'Fire Rate',
    Default = false,
    Callback = function(value)
        Settings.FireRate = value
        if value then
            ApplyGunModChanges()
        else
            RestoreGunModValues()
        end
    end
})

SectionGunMods:Toggle({
    Title = 'Velocity',
    Default = false,
    Callback = function(value)
        Settings.Velocity = value
        if value then
            ApplyGunModChanges()
        else
            RestoreGunModValues()
        end
    end
})

SectionGunMods:Toggle({
    Title = 'Automatic',
    Default = false,
    Callback = function(value)
        Settings.Automatic = value
        if value then
            ApplyGunModChanges()
        else
            RestoreGunModValues()
        end
    end
})

SectionGunMods:Toggle({
    Title = 'Damage',
    Default = false,
    Callback = function(value)
        Settings.Damage = value
        if value then
            ApplyGunModChanges()
        else
            RestoreGunModValues()
        end
    end
})

SectionGunMods:Toggle({
    Title = 'Gadget Damage',
    Default = false,
    Callback = function(value)
        Settings.GadgetDamage = value
        if value then
            ApplyGunModChanges()
        else
            RestoreGunModValues()
        end
    end
})

local TabPlayerESP = Box:Tab({
    Title = "Player/ESP's";
})

local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()


local SectionESP = TabPlayerESP:Section({
    Title = "ESP's";
})

ESP.Names = false


SectionESP:Toggle({
    Title = 'Enable Esp',
    Default = false,
    Callback = function(value)
        Settings.Esp = value
        ESP:Toggle(Settings.Esp)
    end
})


SectionESP:Toggle({
    Title = 'Player Tracers',
    Default = false,
    Callback = function(bool)
        Settings.Tracers = bool
        ESP.Tracers = Settings.Tracers
    end
})

SectionESP:Toggle({
    Title = 'Player Text',
    Default = false,
    Callback = function(bool)
        Settings.Names = bool
        ESP.Names = Settings.Names
    end
})

SectionESP:Toggle({
    Title = 'Player Boxes',
    Default = false,
    Callback = function(bool)
        Settings.Boxes = bool
        ESP.Boxes = Settings.Boxes
    end
})

local SectionPlayerMod = TabPlayerESP:Section({
    Title = "Player Mod's";
})

SectionPlayerMod:Toggle({
    Title = 'Enable Additional Speed',
    Default = false,
    Callback = function(value)
        Settings.Speed = value
        if value then
            ApplyGunModChanges()
        else
            RestoreGunModValues()
        end
    end
})

SectionPlayerMod:Slider({
    Title = "Additional Speed Amount",
    Min = 1,
    Max = 400,
    Default = 1,
    Callback = function(v)
        Settings.AddictionalSpeed = v
        ApplyGunModChanges()
    end
})

SectionPlayerMod:Button({
    Title = "Reset Character",
    Callback = function()
        local player = game.Players.LocalPlayer
        player.Character.Humanoid.Health = 0
    end
})

Notification:Notify(
    {Title = "Discord", Description = "Would you like to join our discord?"},
    {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 5, Type = "option"},
    {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = function(State) 
        print(tostring(State)) 
        if State then 
            setclipboard("https://discord.gg/Q4vrDgzb7G")
            Notification:Notify(
                {Title = "Discord", Description = "Link Set to Clipboard"},
                {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 5, Type = "default"}
            )
        end
    end}
)
