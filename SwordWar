repeat task.wait() until game:IsLoaded()
game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    wait(1)

    game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
    print("Anti-AFK Is On")
end


getgenv().rejoin = game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
    if child.Name == 'ErrorPrompt' and child:FindFirstChild('MessageArea') and child.MessageArea:FindFirstChild("ErrorFrame") then
        game:GetService("TeleportService"):Teleport(game.PlaceId)
    end
end)

local destinationPositions = {}

local function updateDestinationPositions()
    destinationPositions = {}
    
    local touchPartNames = {"touchPart1", "touchPart2", "touchPart3", "touchPart4", "touchPart5", "touchPart6", "touchPart7", "touchPart8", "touchPart9"}
    
    for _, touchPartName in ipairs(touchPartNames) do
        local touchPart = workspace.ForScript.Wave.Touch:FindFirstChild(touchPartName)
        if touchPart and touchPart:IsA("BasePart") then
            destinationPositions["World" .. tostring(_)] = touchPart.CFrame.Position
        else
            warn("Could not find " .. touchPartName)
        end
    end
end

updateDestinationPositions()

workspace.ForScript.Wave.Touch.ChildAdded:Connect(function(newChild)
    if newChild:IsA("Part") then
        updateDestinationPositions()
    end
end)



local Settings = {
    KillAura = false,
    EndlessKillAura1 = false,
    GodMode2 = false,
    SelectedWorld = "",
    SelectedSpeed = "",
    CheesedLevels = false,
    SelectedEgg = false,
    AutoHatch = false,
    CommonAutoDelete = false,
    RareAutoDelete = false,
    EpicAutoDelete = false,
    LegendAutoDelete = false,
    MysteriousAutoDelete = false,
    AutoRebirth = false,
    StatAmount = 1,
    HealthStat = false,
    SpeedStat = false,
    DamageStat = false,
    CritStat = false,
    SelectedCode = "",
    Quest = false,
    Craft = false,
    DrillRaidKillAura = false,
    EventTPToMob = false,
    EventTPToMob1 = false,
    WalkSpeed = false,
    EndlessFarm = false,
    EndlessKillAura = false,
    SkibiKillAura = false,
    KillAuraEvent = false,
    EndlessBringMobs = false,
    NormalBringMobs = false,
    YDistance = 25,
    X_Distance = 15.5,
    GameTime = 0,
    AutoGK = false,
    SelectedKey = "",
    AutoKeyUse = false,
    UseKeyAtWave = 50,
    EndlessEndWaveAt = 51,
    AutoEndEndless = false,
}

local BeaconorBossMob = false

spawn(function()
	pcall(function()
		game:GetService("RunService").Stepped:Connect(function()
            if Settings.EndlessFarm and BeaconorBossMob == true then
				if not game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip") then
					local Noclip = Instance.new("BodyVelocity")
					Noclip.Name = "BodyClip"
					Noclip.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
					Noclip.MaxForce = Vector3.new(100000,100000,100000)
					Noclip.Velocity = Vector3.new(0,0,0)
			 	end
		  	else	
			 	if game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip") then
					game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip"):Destroy()
			 	end
		  	end
		end)
	end)
end)


function TweenStuff(targetCFrame, speed, X_Distance, Y_Distance)
    speed = speed or 25  
    local duration = (targetCFrame.p - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude / speed
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    local tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = targetCFrame + Vector3.new(X_Distance, Y_Distance, 0)})
    tween:Play()
end

local TweenService = game:GetService("TweenService")

local function tweenCFrame(property, targetCFrame, duration)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(property, tweenInfo, {CFrame = targetCFrame})
    tween:Play()
end

local function tweenMobToPlayer(mob, player, maxDistance, desiredSpeed, offset)
    local mobRootPart = mob:FindFirstChild("HumanoidRootPart")
    local playerRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

    if mobRootPart and playerRootPart then
        local distance = (playerRootPart.Position - mobRootPart.Position).Magnitude

        if distance <= maxDistance then
            local targetPosition = playerRootPart.Position + offset
            local targetCFrame = CFrame.new(targetPosition)

            local speed = distance / desiredSpeed
            tweenCFrame(mobRootPart, targetCFrame, speed)
        end
    end
end

local function setCharacterOrientation(character)
    if character and character.PrimaryPart then
        local lookVector = Vector3.new(0, 0, 1)
        local rootPart = character.PrimaryPart
        rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + lookVector)
    end
end


local XP = false
local XP1 = false
local player = game.Players.LocalPlayer


local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/DeityHB/Stuff/main/UI.2'))()
local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()
local JumbleESP = loadstring(game:HttpGet("https://jumblescripts.com/JumESPLIB.lua"))()



local Box = Library.Render({
    Title = 'Kitsune';
    SavePosition = true;
})

local AttackBased = Box:Tab({
    Title = 'Farming Based'
})

local UpgradeBased = Box:Tab({
    Title = 'Upgrade Based'
})

local MiscBased = Box:Tab({
    Title = 'Misc Based'
})

local Farming = AttackBased:Section({
    Title = "Farming";
})

local Endless = AttackBased:Section({
    Title = "Endless Farming";
})

task.spawn(function()
    while task.wait() do
        pcall(function()
            if Settings.CheesedLevels then
                player.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").ForScript["Monster_"].M0.HumanoidRootPart.CFrame
                local args = {
                    [1] = "DamToMonster",
                    [2] = workspace.ForScript.Monster_.M0,
                    [3] = {
                        ["damtype"] = "normal"
                    }
                }
                
                game:GetService("ReplicatedStorage").CurRemotes.MonsterEvent:FireServer(unpack(args))
            end
        end)
    end
end)

local SelectedWorldDropdown = Farming:Dropdown({
    Title = "Select World",
    List = {"World1", "World2", "World3", "World4", "World5","World6","World7","World8","World9"},
    Callback = function(v)
        Settings.SelectedWorld = v
    end
})


Farming:Toggle({
    Title = 'World Farm',
    Default = false,
    Callback = function(value)
        Settings.KillAura = value
    end
})


Farming:Toggle({
    Title = 'Bring Mobs (Requires World Farm, Contains form of Godmode)',
    Default = false,
    Callback = function(value)
        Settings.NormalBringMobs = value
    end
})


local playerName = game.Players.LocalPlayer.Name

local function GetPlayerMap(playerName)
    local monsterFolder = game.workspace.ForScript.Monster
    local mapFolders = monsterFolder:GetDescendants()
    for _, mapFolder in ipairs(mapFolders) do
        local playerMapFolder = mapFolder:FindFirstChild("Player")
        if playerMapFolder and playerMapFolder:FindFirstChild(playerName) then
            return mapFolder
        end
    end
    return nil
end

task.spawn(function()
    while task.wait() do
        if Settings.KillAura then
            if player.Character and player.Character.Humanoid and player.Character.Humanoid.Health > 0 then
                local playerMap = GetPlayerMap(playerName)
                if Settings.SelectedWorld ~= "" then
                    if playerMap then
                        local monsterFolder = playerMap:FindFirstChild("Monster_")
                        if monsterFolder then
                            for i, v in ipairs(monsterFolder:GetChildren()) do
                                if v and v:FindFirstChild("HumanoidRootPart") then
                                    if Settings.NormalBringMobs then
                                        tweenMobToPlayer(v, player, 1000, 1000, Vector3.new(0,0,13))
                                    end
    
                                    local args = {
                                        [1] = "DamToMonster",
                                        [2] = v,
                                        [3] = {
                                            ["damtype"] = "normal"
                                        }
                                    }
                                    game:GetService("ReplicatedStorage").CurRemotes.MonsterEvent:FireServer(unpack(args))
                                end
                            end
                        end
                    else
                        local destination = destinationPositions[Settings.SelectedWorld]
                        if destination and not GetPlayerMap(playerName) then
                            while not GetPlayerMap(playerName) and Settings.KillAura do
                                player.Character:SetPrimaryPartCFrame(CFrame.new(destination))
                                wait(1)
                            end
                            setCharacterOrientation(player.Character)
                        else
                            warn("Destination not found for the selected world.")
                        end
                    end
                else
                    Notification:Notify(
                        {Title = "Autofarm", Description = "Select a World"},
                        {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 5, Type = "default"}
                    )
                    wait(1)
                end
            end
        end
    end
end)


--[[
local function AXP()
    _G.Toggled = true
    local player = game.Players.LocalPlayer
    local playerName = player.Name
    local playerID = player.UserId

    local function GetPlayerPetFolder()
        local playerPetFolder = workspace.ForScript.player[tostring(playerID)].petFol
        if playerPetFolder then
            return playerPetFolder
        else
            return nil
        end
    end

    local Pet = game:GetService("ReplicatedStorage").CurRemotes.DataChange_Pet

    local function EquipA10()
        Pet:FireServer("equip", "A10")
    end

    local function UnequipA3()
        Pet:FireServer("unequip", "A3")
    end

    if not XP then
        return -- Exit the function if XP is false
    end

    while true do
        if not XP then
            return -- Exit the loop if XP is false
        end

        local playerPetFolder = GetPlayerPetFolder()

        -- Check if playerID is a valid number
        if type(playerID) == "number" then
            if playerPetFolder then
                print("Contents of player's pet folder:")
                for _, child in ipairs(playerPetFolder:GetChildren()) do
                    print(child.Name)
                end
            else
                print("Player's pet folder not found.")
            end
        else
            print("Invalid player ID.")
        end

        local playerMap = nil
        for _, mapFolder in ipairs(workspace.ForScript.Monster:GetDescendants()) do
            local playerMapFolder = mapFolder:FindFirstChild("Player")
            if playerMapFolder and playerMapFolder:FindFirstChild(playerName) then
                playerMap = mapFolder
                break
            end
        end

        if playerMap then
            print("Player is in a map.")

            -- Check if A3 is equipped
            if playerPetFolder and playerPetFolder:FindFirstChild("A3") then
                -- Wait for 5 seconds with A3 equipped
                wait(5)

                -- Check if A3 is still equipped after 5 seconds
                if playerPetFolder:FindFirstChild("A3") then
                    UnequipA3()
                    EquipA10()
                end
            end
        else
            print("Player is not in a map.")

            -- Unequip A10 if equipped
            if playerPetFolder and playerPetFolder:FindFirstChild("A10") then
                Pet:FireServer("unequip", "A10")
            end

            -- Check if any pet is equipped
            local isAnyPetEquipped = false
            if playerPetFolder and #playerPetFolder:GetChildren() > 0 then
                isAnyPetEquipped = true
            end

            -- Equip A3 if no pet is equipped
            if not isAnyPetEquipped then
                Pet:FireServer("equip", "A3")
            end
        end

        wait(1)
    end
end


Farming:Toggle({
    Title = 'Prophet + Arch Mage Use',
    Default = false,
    Callback = function(boolean)
        XP = boolean
    end
})
_G.Toggled = false

task.spawn(function()
    while task.wait() do
        if XP and _G.Toggled ~= true then
            AXP()
        end 
    end 
end)






local function AMR()
    _G.Toggled1 = true
    local player = game.Players.LocalPlayer
    local playerName = player.Name
    local playerID = player.UserId

    local function GetPlayerPetFolder()
        local playerPetFolder = workspace.ForScript.player[tostring(playerID)].petFol
        if playerPetFolder then
            return playerPetFolder
        else
            return nil
        end
    end

    local Pet = game:GetService("ReplicatedStorage").CurRemotes.DataChange_Pet

    local function EquipA4()
        Pet:FireServer("equip", "A4")
    end

    local function UnequipA3()
        Pet:FireServer("unequip", "A3")
    end

    if not XP1 then
        return -- Exit the function if XP is false
    end

    while true do
        if not XP1 then
            return -- Exit the loop if XP is false
        end

        local playerPetFolder = GetPlayerPetFolder()

        -- Check if playerID is a valid number
        if type(playerID) == "number" then
            if playerPetFolder then
                print("Contents of player's pet folder:")
                for _, child in ipairs(playerPetFolder:GetChildren()) do
                    print(child.Name)
                end
            else
                print("Player's pet folder not found.")
            end
        else
            print("Invalid player ID.")
        end

        local playerMap = nil
        for _, mapFolder in ipairs(workspace.ForScript.Monster:GetDescendants()) do
            local playerMapFolder = mapFolder:FindFirstChild("Player")
            if playerMapFolder and playerMapFolder:FindFirstChild(playerName) then
                playerMap = mapFolder
                break
            end
        end

        if playerMap then
            print("Player is in a map.")

            -- Check if A3 is equipped
            if playerPetFolder and playerPetFolder:FindFirstChild("A3") then
                -- Wait for 5 seconds with A3 equipped
                wait(5)

                -- Check if A3 is still equipped after 5 seconds
                if playerPetFolder:FindFirstChild("A3") then
                    UnequipA3()
                    EquipA4()
                end
            end
        else
            print("Player is not in a map.")

            -- Unequip A4 if equipped
            if playerPetFolder and playerPetFolder:FindFirstChild("A4") then
                Pet:FireServer("unequip", "A4")
            end

            -- Check if any pet is equipped
            local isAnyPetEquipped = false
            if playerPetFolder and #playerPetFolder:GetChildren() > 0 then
                isAnyPetEquipped = true
            end

            -- Equip A3 if no pet is equipped
            if not isAnyPetEquipped then
                Pet:FireServer("equip", "A3")
            end
        end

        wait(1)
    end
end



Farming:Toggle({
    Title = 'Rogue + Arch Mage Use',
    Default = false,
    Callback = function(boolean)
        XP1 = boolean
    end
})
_G.Toggled1 = false

task.spawn(function()
    while task.wait() do
        if XP1 and _G.Toggled1 ~= true then
            AMR()
        end 
    end 
end)
]]--

Farming:Toggle({
    Title = 'Drill Raid Kill Aura',
    Default = false,
    Callback = function(value)
        Settings.DrillRaidKillAura = value
    end
})




local playerName1 = game.Players.LocalPlayer.Name

local function GetPlayerMap1(playerName1)
    local monsterFolder = game.workspace.ForScript.DrilRaid
    local mapFolders = monsterFolder:GetDescendants()
    for _, mapFolder in ipairs(mapFolders) do
        local playerMapFolder = mapFolder:FindFirstChild("Player")
        if playerMapFolder and playerMapFolder:FindFirstChild(playerName1) then
            return mapFolder
        end
    end
    return nil
end

task.spawn(function()
    while task.wait() do
        pcall(function()
            if Settings.DrillRaidKillAura then
                if player.Character and player.Character.Humanoid and player.Character.Humanoid.Health > 0 then
                    local playerMap = GetPlayerMap1(playerName1)
                    if playerMap then
                        local monsterFolder = playerMap:FindFirstChild("Monster_")
                        if monsterFolder then
                            for i, v in ipairs(monsterFolder:GetChildren()) do
                                if v and v:FindFirstChild("HumanoidRootPart") then
                                    local args = {
                                        [1] = "DamToMonster",
                                        [2] = v,
                                        [3] = {
                                            ["damtype"] = "normal"
                                        }
                                    }
                                    game:GetService("ReplicatedStorage").CurRemotes.MonsterEvent:FireServer(unpack(args))
                                end
                            end
                        end
                    end
                end
            end
        end)
    end
end)





--[[
Farming:Toggle({
    Title = 'God Mode',
    Default = false,
    Callback = function(value)
        Settings.GodMode = value
    end
})
]]--
Farming:Toggle({
    Title = 'Auto Get Key',
    Default = false,
    Callback = function(value)
        Settings.AutoGK = value
    end
})


task.spawn(function()
    while task.wait(5) do
        pcall(function()
            if Settings.AutoGK then
                game:GetService("ReplicatedStorage").CurRemotes.DataChange_Tower:FireServer("getKeyreward")
            end
        end)
    end
end)

Farming:Toggle({
    Title = 'Auto Quest',
    Default = false,
    Callback = function(value)
        Settings.Quest = value
    end
})

task.spawn(function()
    while task.wait() do
        pcall(function()
            if Settings.Quest then
                local args = {
                    [1] = "Accept"
                }
                
                game:GetService("ReplicatedStorage").CurRemotes.DataChange_Mission:FireServer(unpack(args))
                
                local args = {
                    [1] = "Completed"
                }
                
                game:GetService("ReplicatedStorage").CurRemotes.DataChange_Mission:FireServer(unpack(args))
            end
        end)
    end
end)





Farming:Button({
    Title = "Destroy Effects",
    Callback = function()
        game:GetService("ReplicatedStorage").ForScript.effect:Destroy()
    end
})

local SelectedSped = {
    "x1",
    "x2",
    "x3",
}

local SelectedSpeedDropdown = Endless:Dropdown({
    Title = "Select Speed",
    List = SelectedSped,
    Callback = function(v)
        Settings.SelectedSpeed = v
    end
})

Endless:Toggle({
    Title = 'Endless Farm',
    Default = false,
    Callback = function(value)
        Settings.EndlessFarm = value
    end
})

local SelectedKeyDropdown = Endless:Dropdown({
    Title = "Select Key",
    List = {"Gold", "Normal"},
    Callback = function(v)
        Settings.SelectedKey = v
    end
})

Endless:Slider({
    Title = "Use Key At Wave:",
    Min = 1,
    Max = 200,
    Default = 50,
    Callback = function(v)
        Settings.UseKeyAtWave = v
    end
})

Endless:Slider({
    Title = "Finish Endless Farm at Wave:",
    Min = 1,
    Max = 200,
    Default = 51,
    Callback = function(v)
        Settings.EndlessEndWaveAt = v
    end
})

Endless:Toggle({
    Title = "Enable Auto Key",
    Default = false,
    Callback = function(value)
        Settings.AutoKeyUse = value
    end
})

Endless:Toggle({
    Title = "Enable end Endless at Selected Wave",
    Default = false,
    Callback = function(value)
        Settings.AutoEndEndless = value
    end
})



Endless:Toggle({
    Title = "Bring Mobs/Beacons (REQUIRES ENDLESS FARM, Works as Godmode)",
    Default = false,
    Callback = function(value)
        Settings.EndlessBringMobs = value
    end
})






local function CalculateDistance(point1, point2)
    return (point1 - point2).magnitude
end

local playerName2 = game.Players.LocalPlayer.Name

local function GetPlayerMap2(playerName2)
    local monsterFolder = game.workspace.ForScript.InfiniteMap
    local mapFolders = monsterFolder:GetDescendants()
    for _, mapFolder in ipairs(mapFolders) do
        local playerMapFolder = mapFolder:FindFirstChild("Player")
        if playerMapFolder and playerMapFolder:FindFirstChild(playerName1) then
            return mapFolder
        end
    end
    return nil
end


local lastCFrame;
local playerPosition = player.Character.HumanoidRootPart.Position
task.spawn(function()
    while task.wait() do
        if Settings.EndlessFarm then
            if player.Character and player.Character.Humanoid and player.Character.Humanoid.Health > 0 then
                if Settings.SelectedSpeed ~= "" then
                    local playerMap = GetPlayerMap2(playerName2)
                    if playerMap then
                        local monsterFolder = playerMap:FindFirstChild("Monster_")
                        if monsterFolder then
                            if game:GetService("Workspace").ForScript.InfiniteMap.map1.Skip[Settings.SelectedSpeed].BillboardGui.Enabled == false then
                                for i, v in ipairs(monsterFolder:GetChildren()) do
                                    if v and v:FindFirstChild("HumanoidRootPart") then
                                        if game:GetService("Players").LocalPlayer.PlayerGui.MainGui.MainFrame.Back.Wave.wave.Visible and Settings.AutoEndEndless then
                                            local inputString = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.MainFrame.Back.Wave.wave.Text
                                            local number1 = tonumber(string.match(inputString, "WAVE: (%d+)"))
                                            local number3 = tonumber(number1)
                                            if number3 and tonumber(Settings.EndlessEndWaveAt) and number3 >= tonumber(Settings.EndlessEndWaveAt) then
                                                game:GetService("ReplicatedStorage").CurRemotes.MonsterEvent:FireServer(table.unpack({    [1] = "PlayerReset",    [2] = "EndlessBack",}))
                                            else

                                            end
                                        end


                                        if v.Name == "A1" or v.Name == "A2" or v.Name == "A3" or v.Name == "A4" then
                                            if Settings.EndlessBringMobs then
                                                tweenMobToPlayer(v, player, 1000, 1000, Vector3.new(0,0,15))
                                            end
                                            local args = {
                                                [1] = "DamToMonster",
                                                [2] = v,
                                                [3] = {
                                                    ["damtype"] = "normal"
                                                }
                                            }
                                            game:GetService("ReplicatedStorage").CurRemotes.MonsterEvent:FireServer(unpack(args))
                                        elseif v:FindFirstChild("InfiniteMapBoss") then
                                            if Settings.EndlessBringMobs and not v:FindFirstChild("isSkill") then
                                                tweenMobToPlayer(v, player, 1000, 1000, Vector3.new(0,0,15))
                                            end
                                            BeaconorBossMob = false
                                            local args = {
                                                [1] = "DamToMonster",
                                                [2] = v,
                                                [3] = {
                                                    ["damtype"] = "normal"
                                                }
                                            }
                                            game:GetService("ReplicatedStorage").CurRemotes.MonsterEvent:FireServer(unpack(args))
                                            if v:FindFirstChild("isSkill") then
                                                if v.isSkill and not lastCFrame then
                                                    lastCFrame = player.Character.HumanoidRootPart.CFrame
                                                    pcall(function()
                                                        repeat 
                                                            player.Character.HumanoidRootPart.CFrame = CFrame.new(-1.72872996, 24.4174614, 165.845001, 0.641687155, -6.96393059e-08, 0.766966522, 3.66706203e-08, 1, 6.01176779e-08, -0.766966522, -1.0451604e-08, 0.641687155)
                                                            task.wait()
                                                        until not v:FindFirstChild("isSkill")
                                                        player.Character.HumanoidRootPart.CFrame = lastCFrame
                                                        print("TPED")
                                                        lastCFrame = false
                                                    end)
                                                end
                                            end
                                        elseif v.Name ~= "A1" and v.Name ~= "A2" and v.Name ~= "A3" and v.Name ~= "A4" then
                                            BeaconorBossMob = false
                                            if Settings.EndlessBringMobs then
                                                tweenMobToPlayer(v, player, 1000, 1000, Vector3.new(0,0,15))
                                            end
                                            local args = {
                                                [1] = "DamToMonster",
                                                [2] = v,
                                                [3] = {
                                                    ["damtype"] = "normal"
                                                }
                                            }
                                            game:GetService("ReplicatedStorage").CurRemotes.MonsterEvent:FireServer(unpack(args))
                                        else
                                            BeaconorBossMob = false
                                        end
                                    end
                                end
                            else
                                if game:GetService("Workspace").ForScript.InfiniteMap:FindFirstChild("map1") and game:GetService("Workspace").ForScript.InfiniteMap.map1:FindFirstChild("Skip") and game:GetService("Workspace").ForScript.InfiniteMap.map1.Skip:FindFirstChild(Settings.SelectedSpeed) then
                                    local destination = game:GetService("Workspace").ForScript.InfiniteMap.map1.Skip[Settings.SelectedSpeed].Position
                                    print("1")
                                    while Settings.EndlessFarm do
                                        print("2")
                                        player.Character:SetPrimaryPartCFrame(CFrame.new(destination))
                                        wait(1)
                                        break
                                    end
                                end
                            end
                        end
                    else
                        if Settings.AutoKeyUse then
                            if game:GetService("Workspace").ForScript:FindFirstChild("InfiniteRoom") and game:GetService("Workspace").ForScript:FindFirstChild("InfiniteRoom"):FindFirstChild("Boxmodel") and game:GetService("Workspace").ForScript:FindFirstChild("InfiniteRoom"):FindFirstChild("Boxmodel"):FindFirstChild("BoxOn") and game:GetService("Workspace").ForScript:FindFirstChild("InfiniteRoom"):FindFirstChild("Boxmodel"):FindFirstChild("BoxOn"):FindFirstChild("Raidbox") and game:GetService("Workspace").ForScript:FindFirstChild("InfiniteRoom"):FindFirstChild("Boxmodel"):FindFirstChild("BoxOn"):FindFirstChild("Raidbox"):FindFirstChild("Attachment") and game:GetService("Workspace").ForScript:FindFirstChild("InfiniteRoom"):FindFirstChild("Boxmodel"):FindFirstChild("BoxOn"):FindFirstChild("Raidbox"):FindFirstChild("Attachment"):FindFirstChild("BillboardGui") and game:GetService("Workspace").ForScript:FindFirstChild("InfiniteRoom"):FindFirstChild("Boxmodel"):FindFirstChild("BoxOn"):FindFirstChild("Raidbox"):FindFirstChild("Attachment"):FindFirstChild("BillboardGui"):FindFirstChild("skip") then
                                local text = game:GetService("Workspace").ForScript.InfiniteRoom.Boxmodel.BoxOn.Raidbox.Attachment.BillboardGui.skip.Text
                                local number7 = string.match(text, "%d+")
                                local NumberV2 = tonumber(number7)
                                if NumberV2 and tonumber(Settings.UseKeyAtWave) and NumberV2 >= tonumber(Settings.UseKeyAtWave) then
                                    if Settings.SelectedKey == "Gold" then
                                        game:GetService("ReplicatedStorage").CurRemotes.DataChange_Tower:FireServer(table.unpack({    [1] = "getBoxreward",    [2] = "goldkey",})) -- gold
                                    elseif Settings.SelectedKey == "Normal" then
                                        game:GetService("ReplicatedStorage").CurRemotes.DataChange_Tower:FireServer(table.unpack({
                                            [1] = "getBoxreward",
                                            [2] = "key",
                                        }))
                                    else
                                        print("Key No Select")
                                    end
                                else
                                    print("VIrgin")                 
                                end
                            else
                                print("L")  
                            end
                        else
                            print("DICK")
                        end
                        if game:GetService("Workspace").ForScript.InfiniteRoom:FindFirstChild("screen") then
                            local destination = game:GetService("Workspace").ForScript.InfiniteRoom:FindFirstChild("screen").Position
                            if destination and not GetPlayerMap2(playerName2) then
                                while not GetPlayerMap2(playerName2) and Settings.EndlessFarm do
                                    player.Character:SetPrimaryPartCFrame(CFrame.new(destination))
                                    wait(1)
                                end
                                setCharacterOrientation(player.Character)
                            else
                                warn("Destination not found for the selected world.")
                            end
                        else
                            print("Endless Hasnt Loaded")
                        end
                    end
                else
                    Notification:Notify(
                        {Title = "Endless Autofarm", Description = "Select a Speed"},
                        {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 5, Type = "default"}
                    )
                    wait(1)
                end              
            end
        end
    end
end)


Endless:Toggle({
    Title = "Kill Aura (DONT USE WITH ENDLESS FARM)",
    Default = false,
    Callback = function(value)
        Settings.EndlessKillAura = value
    end
})

task.spawn(function()
    while task.wait() do
        if Settings.EndlessKillAura then
            if player.Character and player.Character.Humanoid and player.Character.Humanoid.Health > 0 then
                local playerMap = GetPlayerMap2(playerName2)
                if playerMap then
                    local monsterFolder = playerMap:FindFirstChild("Monster_")
                    if monsterFolder then
                        for i, v in ipairs(monsterFolder:GetChildren()) do
                            if v and v:FindFirstChild("HumanoidRootPart") then
                                local args = {
                                    [1] = "DamToMonster",
                                    [2] = v,
                                    [3] = {
                                        ["damtype"] = "normal"
                                    }
                                }
                                game:GetService("ReplicatedStorage").CurRemotes.MonsterEvent:FireServer(unpack(args))
                            end
                        end
                    end
                end
            end
        end
    end
end)


local UserInputService = game:GetService("UserInputService")


Endless:Toggle({
    Title = 'Environmental Damage Minimiser',
    Default = false,
    Callback = function(value)
        Settings.EndlessGodMode = value
    end
})

-- Script generated by SimpleSpy - credits to exx#9394

--[[
local args = {
    [1] = "DamToPlayer_Num",
    [2] = {
        ["dam"] = 105,
        ["Level_"] = 4,
        ["Fol"] = workspace.ForScript.InfiniteMap.map1,
        ["warnTime"] = 1,
        ["cf"] = CFrame.new(2383.219970703125, 40, -364.469970703125) * CFrame.Angles(-3.1415927410125732, 0, -3.1415927410125732),
        ["name"] = "p2",
        ["onfire"] = true,
        ["lastTime"] = 5,
        ["type_"] = "mode2",
        ["Size"] = Vector3.new(59.939998626708984, 50, 29.339998245239258)
    }
}

game:GetService("ReplicatedStorage").CurRemotes.MonsterEvent:FireServer(unpack(args))
]]--


local player = game.Players.LocalPlayer

local namecall;namecall = hookmetamethod(game, '__namecall', function(object, ...)
    local args = {...}
    
    if getnamecallmethod() == "FireServer" then
        if Settings.EndlessGodMode then
            if object.Name == 'MonsterEvent' and args[1] == "DamToPlayer_Num" then
                if type(args[2]) == "table" then
                    args[2]["Level_"] = 1
                end
            end
        end
    end
    return namecall(object, unpack(args));
end);


local Skibidi = AttackBased:Section({
    Title = "Skibidi Event";
})


Skibidi:Toggle({
    Title = 'Event Farm',
    Default = false,
    Callback = function(value)
        Settings.KillAuraEvent = value
    end
})

Skibidi:Toggle({
    Title = 'Bring Mob',
    Default = false,
    Callback = function(value)
        Settings.EventTPToMob1 = value
    end
})


local function GetPlayerMap6(playerName1)
    local monsterFolder = game.workspace.ForScript.Skibi4
    local mapFolders = monsterFolder:GetDescendants()
    for _, mapFolder in ipairs(mapFolders) do    
        local playerMapFolder = game.workspace.ForScript.Skibi4.Player
        if playerMapFolder and playerMapFolder:FindFirstChild(playerName1) then
            return mapFolder
        end
    end
    return nil
end

local function moveto(obj, speed)
    local info = TweenInfo.new(((player.Character.HumanoidRootPart.Position - obj.Position).Magnitude) / speed,Enum.EasingStyle.Linear)
    local tween = TweenService:Create(player.Character.HumanoidRootPart, info, {CFrame = obj})
    tween:Play()
end 


task.spawn(function()
    while task.wait() do
        pcall(function()
            if Settings.KillAuraEvent then
                if player.Character and player.Character.Humanoid and player.Character.Humanoid.Health > 0 then
                    local playerMap = GetPlayerMap6(playerName1)
                    if playerMap then
                        local monsterFolder = game.workspace.ForScript.Skibi4.Monster_
                        if monsterFolder then
                            for i, v in ipairs(monsterFolder:GetChildren()) do
                                if v and v:FindFirstChild("HumanoidRootPart") then
                                    if Settings.EventTPToMob1 then
                                        tweenMobToPlayer(v, player, 1000, 1000, Vector3.new(0,0,-15))
                                    end
                                    local args = {
                                        [1] = "DamToMonster",
                                        [2] = v,
                                        [3] = {
                                            ["damtype"] = "normal"
                                        }
                                    }
                                    game:GetService("ReplicatedStorage").CurRemotes.MonsterEvent:FireServer(unpack(args))
                                end
                            end
                        end
                    else
                        local destination = game:GetService("Workspace").ForScript.Skibi4.TouchP.Position
                        if destination and not GetPlayerMap6(playerName1) then
                            while not GetPlayerMap6(playerName1) and Settings.KillAuraEvent do
                                player.Character:SetPrimaryPartCFrame(CFrame.new(destination))
                                wait(1)
                            end
                            setCharacterOrientation(player.Character)
                        else
                            warn("Destination not found for the selected world.")
                        end
                    end
                end
            end
        end)
    end
end)




local EggSection = UpgradeBased:Section({
    Title = "Eggs";
})

local Eggs = {
    "Green - 50",
    "Blue - 1K",
    "Purple - 15K",
    "Yellow - 50K",
    "Red with Yellow Spots - 500K",
    "Rainbow - 1M",
    "Obsidian with Stars - 12M",
    "Ice with Lines - 21.6M",
    "Ice with Stars - 324M",
    "Purple Emo with Horns - 550M",
    "Purple Emo with Crown n Horns - 7.7B",
    "Egg After This",
    "Last Egg",
}

local EggSelectDropdown = EggSection:Dropdown({
    Title = "Select Egg",
    List = Eggs,
    Callback = function(v)
        Settings.SelectedEgg = v
        local selectedPosition = nil
        for i, egg in ipairs(Eggs) do
            if egg == v then
                selectedPosition = i
                break
            end
        end
        if selectedPosition then
            Settings.SelectedPosition = selectedPosition
        end
    end
})

EggSection:Toggle({
    Title = 'Auto Hatch',
    Default = false,
    Callback = function(value)
        Settings.AutoHatch = value
    end
})

EggSection:Toggle({
    Title = 'Common Auto Delete',
    Default = false,
    Callback = function(value)
        Settings.CommonAutoDelete = value
    end
})

EggSection:Toggle({
    Title = 'Rare Auto Delete',
    Default = false,
    Callback = function(value)
        Settings.RareAutoDelete = value
    end
})


EggSection:Toggle({
    Title = 'Epic Auto Delete',
    Default = false,
    Callback = function(value)
        Settings.EpicAutoDelete = value
    end
})

EggSection:Toggle({
    Title = 'Legend Auto Delete',
    Default = false,
    Callback = function(value)
        Settings.LegendAutoDelete = value
    end
})


EggSection:Toggle({
    Title = 'Mysterious Auto Delete',
    Default = false,
    Callback = function(value)
        Settings.MysteriousAutoDelete = value
    end
})

task.spawn(function()
    while task.wait() do
        pcall(function()
            if Settings.AutoHatch then
                local args = {
                    [1] = "Egg",
                    [2] = Settings.SelectedPosition,
                    [3] = false,
                    [4] = {
                        ["Common"] = Settings.CommonAutoDelete,
                        ["Legend"] = Settings.LegendAutoDelete,
                        ["Mysterious"] = Settings.MysteriousAutoDelete,
                        ["Epic"] = Settings.EpicAutoDelete,
                        ["Rare"] = Settings.RareAutoDelete
                    }
                }

                game:GetService("ReplicatedStorage").CurrentModule.RangeCheck.RangeEvent:FireServer(unpack(args))
            end
        end)
    end
end)

EggSection:Toggle({
    Title = 'Auto Craft',
    Default = false,
    Callback = function(value)
        Settings.Craft = value
    end
})

task.spawn(function()
    while task.wait(1) do
        pcall(function()
            if Settings.Craft then
                local args = {
                    [1] = "craftAll"
                }
                
                game:GetService("ReplicatedStorage").CurRemotes.DataChange_Item:FireServer(unpack(args))
            end
        end)
    end
end)

local StatSection = UpgradeBased:Section({
    Title = "Stats";
})

StatSection:Toggle({
    Title = 'Auto Rebirth',
    Default = false,
    Callback = function(value)
        Settings.AutoRebirth = value
    end
})


task.spawn(function()
    while task.wait(3) do
        pcall(function()
            if Settings.AutoRebirth then
                local args = {
                    [1] = "rebirth"
                }
                
                game:GetService("ReplicatedStorage").CurRemotes.DataChange_Rebirth:FireServer(unpack(args))
            end
        end)
    end
end)



Settings.StatAmount = 1

StatSection:Slider({
    Title = "Stat Amount",
    Min = 1,
    Max = 100,
    Default = 1,
    Callback = function(v)
        Settings.StatAmount = v
    end
})

local currentStatPoint = 0

task.spawn(function()
    while task.wait() do
        pcall(function()
            local statPointText = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.UpgradeFrame.Points.Text
            currentStatPoint = tonumber(statPointText:match("(%d+)")) 
        end)
    end
end)

StatSection:Toggle({
    Title = 'Auto Health Stat',
    Default = false,
    Callback = function(value)
        Settings.HealthStat = value
    end
})

task.spawn(function()
    while task.wait() do
        if Settings.HealthStat then
            if currentStatPoint and tonumber(Settings.StatAmount) and currentStatPoint >= tonumber(Settings.StatAmount) then
                local args = {
                    [1] = "ClickPoints",
                    [2] = {
                        ["Points"] = tonumber(Settings.StatAmount),
                        ["Obj"] = "GHealth"
                    }
                }

                game:GetService("ReplicatedStorage").CurRemotes.DataChange_Points:FireServer(unpack(args))
            end
        end
    end
end)


StatSection:Toggle({
    Title = 'Auto Damage Stat',
    Default = false,
    Callback = function(value)
        Settings.DamageStat = value
    end
})

task.spawn(function()
    while task.wait() do
        pcall(function()
            if Settings.DamageStat then
                if currentStatPoint and tonumber(Settings.StatAmount) and currentStatPoint >= tonumber(Settings.StatAmount) then
                    local args = {
                        [1] = "ClickPoints",
                        [2] = {
                            ["Points"] = tonumber(Settings.StatAmount),
                            ["Obj"] = "GDamage"
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").CurRemotes.DataChange_Points:FireServer(unpack(args))
                end
            end
        end)
    end
end)


StatSection:Toggle({
    Title = 'Auto Speed Stat',
    Default = false,
    Callback = function(value)
        Settings.SpeedStat = value
    end
})

task.spawn(function()
    while task.wait() do
        pcall(function()
            if Settings.SpeedStat then
                if currentStatPoint and tonumber(Settings.StatAmount) and currentStatPoint >= tonumber(Settings.StatAmount) then
                    local args = {
                        [1] = "ClickPoints",
                        [2] = {
                            ["Points"] = tonumber(Settings.StatAmount),
                            ["Obj"] = "GSpeed"
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").CurRemotes.DataChange_Points:FireServer(unpack(args))
                end
            end
        end)
    end
end)


StatSection:Toggle({
    Title = 'Auto Crit Stat',
    Default = false,
    Callback = function(value)
        Settings.CritStat = value
    end
})

task.spawn(function()
    while task.wait() do
        pcall(function()
            if Settings.CritStat then
                local text = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.UpgradeFrame.main.GCriticalHit.Plus.Rnum.Text
                local number = string.match(text, "Lv%.(%d+)")
                local statAmount = tonumber(Settings.StatAmount)

                if number and statAmount and tonumber(number) < 250 and currentStatPoint and currentStatPoint >= statAmount then
                    local args = {
                        [1] = "ClickPoints",
                        [2] = {
                            ["Points"] = statAmount,
                            ["Obj"] = "GCriticalHit"
                        }
                    }
                    
                    game:GetService("ReplicatedStorage").CurRemotes.DataChange_Points:FireServer(unpack(args))
                else
                    return
                end
            end
        end)
    end
end)

local Misc = MiscBased:Section({
    Title = "Teleports";
})

Misc:Button({
    Title = "Royal City",
    Callback = function()
        local args = {
            [1] = "Royal City"
        }
        
        game:GetService("ReplicatedStorage").Remotes.Chuansong:FireServer(unpack(args))
        
    end
})

Misc:Button({
    Title = "Outpost",
    Callback = function()
        local args = {
            [1] = "Outpost"
        }
        
        game:GetService("ReplicatedStorage").Remotes.Chuansong:FireServer(unpack(args))
        
    end
})

Misc:Button({
    Title = "Horde Camp",
    Callback = function()
        local args = {
            [1] = "Horde Camp"
        }
        
        game:GetService("ReplicatedStorage").Remotes.Chuansong:FireServer(unpack(args))
        
    end
})

Misc:Button({
    Title = "Glacial Chasm",
    Callback = function()
        local args = {
            [1] = "Glacial Chasm"
        }
        
        game:GetService("ReplicatedStorage").Remotes.Chuansong:FireServer(unpack(args))
    end
})

Misc:Button({
    Title = "Dark Castle",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.Chuansong:FireServer("Dark Castle")
    end
})

Misc:Button({
    Title = "Eternal Guardian Hall",
    Callback = function()
        game:GetService("ReplicatedStorage").Remotes.Chuansong:FireServer("Eternal Guardian Hall")
    end
})



local CodesSection = MiscBased:Section({
    Title = "Codes";
})

local Codes = {
    "KHOQ15SCXZ",
    "COUNTERATTACK",
    "FORKINGDOMZ",
    "ZHIYINNITAIMEI",
    "ANGELHALO",
    "BERSERKERXHEART",
    "SWORD",
    "SOPJCP2MP1VA",
    "IC45IQBK54XA",
}

local CodeSelect = CodesSection:Dropdown({
    Title = "Select Code",
    List = Codes,
    Callback = function(v)
        Settings.SelectedCode = v
    end
})

CodesSection:Button({
    Title = "Redeem Code",
    Callback = function()
        local args = {
            [1] = Settings.SelectedCode
        }
        
        game:GetService("ReplicatedStorage").Remotes.CDK:FireServer(unpack(args))
    end
})




CodesSection:Button({
    Title = "Redeem All Code",
    Callback = function()
        for _, code in ipairs(Codes) do
            local args = {
                [1] = code,
            }
            game:GetService("ReplicatedStorage").Remotes.CDK:FireServer(unpack(args))
        end
    end
})

local PlayerMods = MiscBased:Section({
    Title = "Player Mod";
})

PlayerMods:Slider({
    Title = "Speed",
    Min = 16,
    Max = 500,
    Default = 16,
    Callback = function(v)
        Settings.WalkSpeed = v
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Settings.WalkSpeed
    end
})

PlayerMods:Label({
    Title = "OR",
})

PlayerMods:TextField({
    Title = "Speed",
    Placeholder = "16_Default",
    Callback = function(v)
        Settings.WalkSpeed = v
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Settings.WalkSpeed
    end
})


task.spawn(function()
    while task.wait() do
        pcall(function()
            if Settings.WalkSpeed ~= 16 then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Settings.WalkSpeed
            else
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
            end
        end)
    end
end)


local UniversalTab = Box:Tab({
    Title = 'Universal';
})

local PlayerSection = UniversalTab:Section({
    Title = 'Player'
})

PlayerSection:Slider({
    Title = "Speed",
    Min = 16,
    Max = 500,
    Default = 16,
    Callback = function(v)
        Settings.WalkSpeed = v
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Settings.WalkSpeed
    end
})

PlayerSection:Slider({
    Title = "Jump",
    Min = 50,
    Max = 500,
    Default = 50,
    Callback = function(v)
        Settings.JumpPower = v
        player.Character.Humanoid.JumpPower = Settings.JumpPower
    end
})

local c;
local h;
local bv;
local bav;
local cam;
local flying;
local p = player;
local buttons = {W = false, S = false, A = false, D = false, Moving = false};

local StartFly = function ()
    if not player.Character or not player.Character.Head or flying then return end;
    c = player.Character;
    h = player.Character.Humanoid;
    h.PlatformStand = true;
    cam = workspace:WaitForChild('Camera');
    bv = Instance.new("BodyVelocity");
    bav = Instance.new("BodyAngularVelocity");
    bv.Velocity, bv.MaxForce, bv.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000;
    bav.AngularVelocity, bav.MaxTorque, bav.P = Vector3.new(0, 0, 0), Vector3.new(10000, 10000, 10000), 1000;
    bv.Parent = c.Head;
    bav.Parent = c.Head;
    flying = true;
    h.Died:connect(function() flying = false end);
end;

local EndFly = function ()
    if not p.Character or not flying then return end
    h.PlatformStand = false;
    bv:Destroy();
    bav:Destroy();
    flying = false;
end;

game:GetService("UserInputService").InputBegan:connect(function (input, GPE) 
    if GPE then return end;
    for i, e in pairs(buttons) do
        if i ~= "Moving" and input.KeyCode == Enum.KeyCode[i] then
            buttons[i] = true;
            buttons.Moving = true;
        end;
    end;
end);

game:GetService("UserInputService").InputEnded:connect(function (input, GPE) 
    if GPE then return end;
    local a = false;
    for i, e in pairs(buttons) do
        if i ~= "Moving" then
            if input.KeyCode == Enum.KeyCode[i] then
                buttons[i] = false;
            end;
            if buttons[i] then a = true end;
        end;
    end;
    buttons.Moving = a;
end);

local setVec = function (vec)
    return vec * ((Settings.FlightSpeed) / vec.Magnitude);
end;

game:GetService("RunService").Heartbeat:connect(function (step) -- The actual fly function, called every frame
    if flying and c and c.PrimaryPart then
        local p = c.PrimaryPart.Position;
        local cf = cam.CFrame;
        local ax, ay, az = cf:toEulerAnglesXYZ();
        c:SetPrimaryPartCFrame(CFrame.new(p.x, p.y, p.z) * CFrame.Angles(ax, ay, az));
        if buttons.Moving then
            local t = Vector3.new();
            if buttons.W then t = t + (setVec(cf.lookVector)) end;
            if buttons.S then t = t - (setVec(cf.lookVector)) end;
            if buttons.A then t = t - (setVec(cf.rightVector)) end;
            if buttons.D then t = t + (setVec(cf.rightVector)) end;
            c:TranslateBy(t * step);
        end;
    end;
end);

PlayerSection:Toggle({
    Title = "Fly",
    Callback = function(v)
        Settings.Flight = v
        if Settings.Flight then
            StartFly()
        else
            EndFly()
        end;
    end
})

PlayerSection:Slider({
    Title = "Fly Speed",
    Min = 1,
    Max = 500,
    Default = 50,
    Callback = function(v)
        Settings.FlightSpeed = tonumber(v)
    end
})

PlayerSection:Toggle({
    Title = "Noclip",
    Callback = function(v)
        Settings.Noclip = v
    end
})

local ws = game.workspace


function XrayOn(ws)
    for _,v in pairs(ws:GetChildren()) do 
        if (v:IsA("BasePart")) and not v.Parent:FindFirstChild("Humanoid") then
            v.LocalTransparencyModifier = 0.75
        end
    XrayOn(v) 
    end
end 



function XrayOff(ws)
    for _,v in pairs(ws:GetChildren()) do
        if (v:IsA("BasePart")) and not v.Parent:FindFirstChild("Humanoid") then
            v.LocalTransparencyModifier = 0
        end XrayOff(v)
    end
end

PlayerSection:Toggle({
    Title = "X-Ray",
    Callback = function(v)
        Settings.XRay = v
        if Settings.XRay then
            XrayOn(ws)
        else
            XrayOff(ws)
        end
    end
})

PlayerSection:Slider({
    Title = "FOV",
    Min = 70,
    Max = 120,
    Default = 70,
    Callback = function(v)
        Settings.FOV = v
        game:GetService'Workspace'.Camera.FieldOfView = Settings.FOV
    end
})

PlayerSection:Button({
    Title = "Respawn",
    Callback = function()
        player.Character.Humanoid.Health = 0
    end
})

local ESPTab = UniversalTab:Section({
    Title = 'ESP'
})
local ESPToggle = false

local RedValue = 255
local BlueValue = 255
local GreenValue = 255

function PlayerESP()
    spawn(function()
        while ESPToggle do
            local camera = game:GetService("Workspace").CurrentCamera
    
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                local character = player.Character
        
                if character and character:FindFirstChild("Head") then
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local distance = (player.Character.HumanoidRootPart.Position - camera.CFrame.Position).Magnitude
                        JumbleESP:CreateNametag({
                            foldername = 'PlayerNameESP', -- Required
                            instance = player, -- Required
                            adornee = player.Character.Head, -- Required
                            offset = nil, -- Optional
                            Text = player.Name .. " | " .. tostring(math.floor(distance)) .. " studs",
                            TransparencyVar = 0, -- Optional
                            SizeVar = 15, -- Optional
                            ColorVar = Color3.fromRGB(RedValue,BlueValue,GreenValue) -- Optional
                        })
                    end
                end
            end
            task.wait()
        end
    end)
end

ESPTab:Slider({
    Title = "Red Value",
    Min = 1,
    Max = 255,
    Default = 255,
    Callback = function(v)
        RedValue = v
    end
})

ESPTab:Slider({
    Title = "Blue Value",
    Min = 1,
    Max = 255,
    Default = 255,
    Callback = function(v)
        BlueValue = v
    end
})

ESPTab:Slider({
    Title = "Green Value",
    Min = 1,
    Max = 255,
    Default = 255,
    Callback = function(v)
        GreenValue = v
    end
})


ESPTab:Toggle({
    Title = "Enable ESP",
    Callback = function(v)
        ESPToggle  = v
        if ESPToggle then
            PlayerESP()
        else
            if game.Players.LocalPlayer.PlayerGui:FindFirstChild('PlayerNameESP') then
                game.Players.LocalPlayer.PlayerGui.PlayerNameESP:Destroy()
            end
        end 
    end
})

local GameTab = UniversalTab:Section({
    Title = 'Game'
})

Lighting = game:GetService("Lighting")

local TimeDropdown = GameTab:Dropdown({
    Title = "Day or Night",
    List = {"Night","Day"},
    Callback = function(v)
        Settings.GameTime = v
        if Settings.GameTime == "Night" then
            Lighting.ClockTime = 0
        elseif Settings.GameTime == "Day" then
            Lighting.ClockTime = 14
        end
    end
})

local JobId = game.JobId
local PlaceId = game.PlaceId
local TeleportService = game:GetService("TeleportService")


GameTab:Button({
    Title = "Rejoin",
    Callback = function()
		TeleportService:TeleportToPlaceInstance(PlaceId, JobId, game.Players.LocalPlayer)
    end
})



Notification:Notify(
    {Title = "Discord", Description = "Would you like to join our discord?"},
    {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 15, Type = "option"},
    {Image = "http://www.roblox.com/asset/?id=6023426923", ImageColor = Color3.fromRGB(255, 84, 84), Callback = function(State) 
        print(tostring(State)) 
        if State then 
            setclipboard("https://discord.gg/Q4vrDgzb7G")
            Notification:Notify(
                {Title = "Discord", Description = "Link Set to Clipboard"},
                {OutlineColor = Color3.fromRGB(80, 80, 80),Time = 15, Type = "default"}
            )
        end
    end}
)


local function findExistingUi(ui)
    for _, ui in pairs(game.CoreGui:GetDescendants()) do
        if ui.Name == "KidachiUIToggleScripti" then 
            ui:Destroy()
        end
    end
    return false
end
findExistingUi(ui)



local KidachiUIToggleScripti = Instance.new("ScreenGui")
local KidachiToggleForScript = Instance.new("ImageButton")
local UICorner = Instance.new("UICorner")

KidachiUIToggleScripti.Name = "KidachiUIToggleScripti"
KidachiUIToggleScripti.Parent = game.CoreGui

KidachiToggleForScript.Name = "KidachiToggleForScript"
KidachiToggleForScript.Parent = KidachiUIToggleScripti
KidachiToggleForScript.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
KidachiToggleForScript.BorderSizePixel = 0
KidachiToggleForScript.Position = UDim2.new(0.0910987556, 0, 0.208211139, 0)
KidachiToggleForScript.Size = UDim2.new(0, 65, 0, 65)
KidachiToggleForScript.Image = "http://www.roblox.com/asset/?id=12332814310"

UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = KidachiToggleForScript

local function XZLH_fake_script() -- KidachiToggleForScript.LocalScript 
    local script = Instance.new('LocalScript', KidachiToggleForScript)

    local KidachiScriptToggle = script.Parent
    KidachiScriptToggle.Active = true
    KidachiScriptToggle.Draggable = true

    KidachiScriptToggle.MouseButton1Click:Connect(function()
        if game:GetService("CoreGui").Base.motherFrame.Visible then
            game:GetService("CoreGui").Base.motherFrame.Visible = false
        elseif game:GetService("CoreGui").Base.motherFrame.Visible == false then
            game:GetService("CoreGui").Base.motherFrame.Visible = true
        end
    end)
end
coroutine.wrap(XZLH_fake_script)()







